## Main Interface¶

All of Requests’ functionality can be accessed by these 7 methods. They all return an instance of the `Response` object.

requests.request(_method_ , _url_ , _** kwargs_)[source]¶

    

Constructs and sends a `Request`.

Parameters:

    

  * **method** – method for the new `Request` object: `GET`, `OPTIONS`, `HEAD`, `POST`, `PUT`, `PATCH`, or `DELETE`.

  * **url** – URL for the new `Request` object.

  * **params** – (optional) Dictionary, list of tuples or bytes to send in the query string for the `Request`.

  * **data** – (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the `Request`.

  * **json** – (optional) A JSON serializable Python object to send in the body of the `Request`.

  * **headers** – (optional) Dictionary of HTTP Headers to send with the `Request`.

  * **cookies** – (optional) Dict or CookieJar object to send with the `Request`.

  * **files** – (optional) Dictionary of `'name': file-like-objects` (or `{'name': file-tuple}`) for multipart encoding upload. `file-tuple` can be a 2-tuple `('filename', fileobj)`, 3-tuple `('filename', fileobj, 'content_type')` or a 4-tuple `('filename', fileobj, 'content_type', custom_headers)`, where `'content_type'` is a string defining the content type of the given file and `custom_headers` a dict-like object containing additional headers to add for the file.

  * **auth** – (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.

  * **timeout** (_float_ _or_ _tuple_) – (optional) How many seconds to wait for the server to send data before giving up, as a float, or a (connect timeout, read timeout) tuple.

  * **allow_redirects** (_bool_) – (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to `True`.

  * **proxies** – (optional) Dictionary mapping protocol to the URL of the proxy.

  * **verify** – (optional) Either a boolean, in which case it controls whether we verify the server’s TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to `True`.

  * **stream** – (optional) if `False`, the response content will be immediately downloaded.

  * **cert** – (optional) if String, path to ssl client cert file (.pem). If Tuple, (‘cert’, ‘key’) pair.

Returns:

    

`Response` object

Return type:

    

requests.Response

Usage:

```
>>> import requests
>>> req = requests.request('GET', 'https://httpbin.org/get')
>>> req
<Response [200]>

```

requests.head(_url_ , _** kwargs_)[source]¶

    

Sends a HEAD request.

Parameters:

    

  * **url** – URL for the new `Request` object.

  * ****kwargs** – Optional arguments that `request` takes. If allow_redirects is not provided, it will be set to False (as opposed to the default `request` behavior).

Returns:

    

`Response` object

Return type:

    

requests.Response

requests.get(_url_ , _params =None_, _** kwargs_)[source]¶

    

Sends a GET request.

Parameters:

    

  * **url** – URL for the new `Request` object.

  * **params** – (optional) Dictionary, list of tuples or bytes to send in the query string for the `Request`.

  * ****kwargs** – Optional arguments that `request` takes.

Returns:

    

`Response` object

Return type:

    

requests.Response

requests.post(_url_ , _data =None_, _json =None_, _** kwargs_)[source]¶

    

Sends a POST request.

Parameters:

    

  * **url** – URL for the new `Request` object.

  * **data** – (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the `Request`.

  * **json** – (optional) A JSON serializable Python object to send in the body of the `Request`.

  * ****kwargs** – Optional arguments that `request` takes.

Returns:

    

`Response` object

Return type:

    

requests.Response

requests.put(_url_ , _data =None_, _** kwargs_)[source]¶

    

Sends a PUT request.

Parameters:

    

  * **url** – URL for the new `Request` object.

  * **data** – (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the `Request`.

  * **json** – (optional) A JSON serializable Python object to send in the body of the `Request`.

  * ****kwargs** – Optional arguments that `request` takes.

Returns:

    

`Response` object

Return type:

    

requests.Response

requests.patch(_url_ , _data =None_, _** kwargs_)[source]¶

    

Sends a PATCH request.

Parameters:

    

  * **url** – URL for the new `Request` object.

  * **data** – (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the `Request`.

  * **json** – (optional) A JSON serializable Python object to send in the body of the `Request`.

  * ****kwargs** – Optional arguments that `request` takes.

Returns:

    

`Response` object

Return type:

    

requests.Response

requests.delete(_url_ , _** kwargs_)[source]¶

    

Sends a DELETE request.

Parameters:

    

  * **url** – URL for the new `Request` object.

  * ****kwargs** – Optional arguments that `request` takes.

Returns:

    

`Response` object

Return type:

    

requests.Response